import React from "react";
import { Form } from "react-bootstrap";
import { 
    Button,
    Card,
    CardActions,
    CardContent,
    Collapse,
    Grid, 
    TextField 
} from "@material-ui/core";
import TokenInput from "react-customize-token-input";
import DateFnsUtils from "dateIoFnsUtils";
import { DateTimePicker, MuiPickersUtilsProvider } from "material-ui-pickers";
import PropTypes from "prop-types";

import { helpers } from "../../../common_helpers/helpers";
import { 
    CreateKillChainPhases, 
    CreateKillChainPhasesList, 
    CreateListMalwareType,
    CreateListCapabilities,
    CreateListImplementationLanguages,
    CreateListArchitectureExecutionEnvs,
} from "../anyElements.jsx";
import { CreateShortInformationSTIXObject } from "../createShortInformationSTIXObject.jsx";

const defaultData = "0001-01-01T00:00:00.000Z";
const minDefaultData = new Date();

export default function CreateMalwarePatternElements(props){
    let { 
        isDisabled,
        showRefElement,
        campaignPatterElement,
        handlerName,
        handlerAliases,
        handlerIsFamily,
        handlerLastSeen,
        handlerFirstSeen,
        handlerDescription,
        handlerCapabilities,
        handlerMalwareTypes,
        handlerButtonShowLink,
        handlerDeleteKillChain,
        handlerAddKillChainPhases,
        handlerImplementationLanguages,
        handlerArchitectureExecutionEnvs,
    } = props;
    
    let [ expanded, setExpanded ] = React.useState(false);
    let [ refId, setRefId ] = React.useState("");
    let handleExpandClick = (id) => {
        if(id !== refId){
            setExpanded(true); 
            setRefId(id);
        } else {
            if(expanded){
                setExpanded(false);
            } else {
                setExpanded(true); 
            }    
        }

        handlerButtonShowLink(id);
    };

    let firstSeen = minDefaultData;
    let lastSeen = minDefaultData;
    let currentTimeZoneOffsetInHours = new Date().getTimezoneOffset() / 60;
    let ms = currentTimeZoneOffsetInHours * 3600000;
    
    if(currentTimeZoneOffsetInHours > 0){
        if(typeof campaignPatterElement.first_seen !== "undefined" && campaignPatterElement.first_seen !== defaultData){
            firstSeen = new Date(Date.parse(campaignPatterElement.first_seen) + ms);
        }

        if(typeof campaignPatterElement.last_seen !== "undefined" && campaignPatterElement.last_seen !== defaultData){
            lastSeen = new Date(Date.parse(campaignPatterElement.last_seen) + ms);
        }
    } else {
        if(typeof campaignPatterElement.first_seen !== "undefined" && campaignPatterElement.first_seen !== defaultData){
            firstSeen = new Date(Date.parse(campaignPatterElement.first_seen) - (ms * -1));
        }

        if(typeof campaignPatterElement.last_seen !== "undefined" && campaignPatterElement.last_seen !== defaultData){
            lastSeen = new Date(Date.parse(campaignPatterElement.last_seen) - (ms * -1));
        }
    }

    return (<React.Fragment>
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Наименование:</span></Grid>
            <Grid item container md={8}>
                {(campaignPatterElement.id && campaignPatterElement.id !== "")? 
                    <span className="mt-2">{campaignPatterElement.name}</span>:
                    <TextField
                        fullWidth
                        disabled={isDisabled}
                        id="name-element"
                        InputLabelProps={{ shrink: true }}
                        onChange={handlerName}
                        value={(campaignPatterElement.name)? campaignPatterElement.name: ""}
                    />}
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">Дата и время</span>&nbsp;&nbsp;&nbsp;&nbsp;</Grid>
            <Grid item container md={8}></Grid>
        </Grid>      
    
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">создания:</span></Grid>
            <Grid item container md={8}>
                {helpers.convertDateFromString(campaignPatterElement.created, { monthDescription: "long", dayDescription: "numeric" })}
            </Grid>
        </Grid>
    
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">последнего обновления:</span></Grid>
            <Grid item container md={8}>
                {helpers.convertDateFromString(campaignPatterElement.modified, { monthDescription: "long", dayDescription: "numeric" })}
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3} style={{ marginTop: 2 }}>
            <Grid item container md={4} justifyContent="flex-end">
                <span className="text-muted">Начало временного окна, когда данный субъект угроз был впервые зафиксирован:</span>
            </Grid>
            <Grid item container md={8}>
                {isDisabled?
                    helpers.convertDateFromString(firstSeen, { monthDescription: "long", dayDescription: "numeric" })
                    :<MuiPickersUtilsProvider utils={DateFnsUtils}>
                        <DateTimePicker
                            variant="inline"
                            ampm={false}
                            value={firstSeen}
                            minDate={new Date("2000-01-01")}
                            maxDate={new Date()}
                            onChange={handlerFirstSeen}
                            format="dd.MM.yyyy HH:mm"
                        />
                    </MuiPickersUtilsProvider>}
            </Grid>
        </Grid>
    
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end">
                <span className="text-muted">Окончание временного окна, когда данный субъект угроз был зафиксирован в последний раз:</span>
            </Grid>
            <Grid item container md={8}>
                {isDisabled?
                    helpers.convertDateFromString(lastSeen, { monthDescription: "long", dayDescription: "numeric" }):
                    <MuiPickersUtilsProvider utils={DateFnsUtils}>
                        <DateTimePicker
                            variant="inline"
                            ampm={false}
                            value={lastSeen}
                            minDate={new Date("2000-01-02")}
                            maxDate={new Date()}
                            onChange={handlerLastSeen}
                            format="dd.MM.yyyy HH:mm"
                        />
                    </MuiPickersUtilsProvider>}
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3} style={{ marginTop: 2 }}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">Подробное описание:</span></Grid>
            <Grid item container md={8}>
                <TextField
                    id="outlined-description-static"
                    multiline
                    minRows={3}
                    maxRows={8}
                    fullWidth
                    disabled={isDisabled}
                    onChange={handlerDescription}
                    value={(campaignPatterElement.description)? campaignPatterElement.description: ""}
                    variant="outlined"/>
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3} style={{ marginTop: 2 }}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">Альтернативные имена используемые для идентификации этого ПО или семейства ПО:</span></Grid>
            <Grid item md={8}>
                <TokenInput
                    style={{ height: "80px", width: "auto" }}
                    readOnly={isDisabled}
                    tokenValues={(!campaignPatterElement.aliases) ? []: campaignPatterElement.aliases}
                    onTokenValuesChange={handlerAliases} />
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3} style={{ marginTop: 2 }}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted">Представляет ли объект семейство вредоносных программ (если да) или экземпляр вредоносного ПО (если нет):</span></Grid>
            <Grid item md={8} className="text-end">
                <Form.Group>
                    <Form.Control 
                        disabled={isDisabled}
                        as="select" 
                        size="sm" 
                        style={{ width: "100px" }}
                        onChange={handlerIsFamily} 
                        value={campaignPatterElement.is_family} 
                        id="dropdown_list_is_family" >
                        <option key={"key_defanged_true"} value={true} >да</option>
                        <option key={"key_defanged_false"} value={false} >нет</option>
                    </Form.Control>
                </Form.Group>
            </Grid>
        </Grid>

        <Grid container direction="row" spacing={3} style={{ marginBottom: 4 }}>
            <Grid item container md={12}>
                <CreateKillChainPhases
                    isDisabled={isDisabled}
                    handlerAddKillChainPhases={handlerAddKillChainPhases} />
                <CreateKillChainPhasesList 
                    isDisabled={isDisabled}
                    listKillChainPhases={(!campaignPatterElement.kill_chain_phases) ? []: campaignPatterElement.kill_chain_phases} 
                    handlerDeleteItem={handlerDeleteKillChain} />                
            </Grid>
        </Grid>

        <CreateListMalwareType
            isDisabled={isDisabled}
            campaignPatterElement={campaignPatterElement}
            handlerMalware={handlerMalwareTypes} />

        <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
            <Grid item container md={12} justifyContent="flex-start">
                <span className="text-muted">
                    Идентификаторы ОС в которых могут быть выполнено вредоносное ПО или семейство вредоносных программ:
                </span>
            </Grid>
        </Grid>

        {campaignPatterElement.operating_system_refs && (typeof campaignPatterElement.operating_system_refs !== "undefined") && campaignPatterElement.operating_system_refs.length > 0?
            <React.Fragment>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        <span className="text-muted">Список идентификаторов ОС в которых может быть выполнено вредоносное ПО или семейство вредоносных программ:</span>
                    </Grid>
                </Grid>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        {campaignPatterElement.operating_system_refs.map((item, key) => {
                            let type = item.split("--");
                            let objectElem = helpers.getLinkImageSTIXObject(type[0]);
        
                            if(typeof objectElem === "undefined" ){
                                return "";
                            }

                            return (<Card variant="outlined" style={{ width: "100%" }} key={`key_rf_to_ref_${key}`}>
                                <CardActions>
                                    <Button onClick={() => { 
                                        handleExpandClick(item);
                                    }}>
                                        <img 
                                            src={`/images/stix_object/${objectElem.link}`} 
                                            width="25" 
                                            height="25" />
                                        &nbsp;{item}
                                    </Button>
                                </CardActions>
                                <Collapse in={refId === item && expanded} timeout="auto" unmountOnExit>
                                    <CardContent>
                                        {(showRefElement.id !== "" && showRefElement.id === item)? 
                                            <CreateShortInformationSTIXObject 
                                                obj={showRefElement.obj}
                                                handlerClick={() => {}} 
                                            />: 
                                            <i>информация не найдена</i>}
                                    </CardContent>
                                </Collapse>
                            </Card>);
                        })}
                    </Grid>
                </Grid>
            </React.Fragment>:
            ""}

        <CreateListArchitectureExecutionEnvs 
            isDisabled={isDisabled}
            campaignPatterElement={campaignPatterElement}
            handlerArchitectureExecutionEnvs={handlerArchitectureExecutionEnvs} />

        <CreateListImplementationLanguages 
            isDisabled={isDisabled}
            campaignPatterElement={campaignPatterElement}
            handlerImplementationLanguages={handlerImplementationLanguages} />

        <CreateListCapabilities 
            isDisabled={isDisabled}
            campaignPatterElement={campaignPatterElement}
            handlerCapabilities={handlerCapabilities} />

        {campaignPatterElement.sample_refs && (typeof campaignPatterElement.sample_refs !== "undefined") && campaignPatterElement.sample_refs.length > 0?
            <React.Fragment>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        <span className="text-muted">Список идентификаторов файлов или артифактов ассоцируемых с вредоносным ПО или семейством вредоносных программ:</span>
                    </Grid>
                </Grid>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        {campaignPatterElement.sample_refs.map((item, key) => {
                            let type = item.split("--");
                            let objectElem = helpers.getLinkImageSTIXObject(type[0]);
    
                            if(typeof objectElem === "undefined" ){
                                return "";
                            }

                            return (<Card variant="outlined" style={{ width: "100%" }} key={`key_rf_to_ref_${key}`}>
                                <CardActions>
                                    <Button onClick={() => { 
                                        handleExpandClick(item);
                                    }}>
                                        <img 
                                            src={`/images/stix_object/${objectElem.link}`} 
                                            width="25" 
                                            height="25" />
                                        &nbsp;{item}
                                    </Button>
                                </CardActions>
                                <Collapse in={refId === item && expanded} timeout="auto" unmountOnExit>
                                    <CardContent>
                                        {(showRefElement.id !== "" && showRefElement.id === item)? 
                                            <CreateShortInformationSTIXObject 
                                                obj={showRefElement.obj}
                                                handlerClick={() => {}} 
                                            />: 
                                            "информация не найдена"}
                                    </CardContent>
                                </Collapse>
                            </Card>);
                        })}
                    </Grid>
                </Grid>
            </React.Fragment>:
            ""}

    </React.Fragment>);
}

CreateMalwarePatternElements.propTypes = {
    isDisabled: PropTypes.bool.isRequired,
    showRefElement: PropTypes.object.isRequired,
    campaignPatterElement: PropTypes.object.isRequired,
    handlerName: PropTypes.func.isRequired,
    handlerAliases: PropTypes.func.isRequired,
    handlerIsFamily: PropTypes.func.isRequired,
    handlerLastSeen: PropTypes.func.isRequired,
    handlerFirstSeen: PropTypes.func.isRequired,
    handlerDescription: PropTypes.func.isRequired,
    handlerCapabilities: PropTypes.func.isRequired,
    handlerMalwareTypes: PropTypes.func.isRequired,
    handlerButtonShowLink: PropTypes.func.isRequired,
    handlerDeleteKillChain: PropTypes.func.isRequired,
    handlerAddKillChainPhases: PropTypes.func.isRequired,
    handlerImplementationLanguages: PropTypes.func.isRequired,
    handlerArchitectureExecutionEnvs: PropTypes.func.isRequired,
};