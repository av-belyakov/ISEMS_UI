import React from "react";
import { 
    Button,
    Card,
    CardActions,
    CardContent,
    Collapse,
    Grid, 
    TextField 
} from "@material-ui/core";
import TokenInput from "react-customize-token-input";
import DateFnsUtils from "dateIoFnsUtils";
import { DateTimePicker, MuiPickersUtilsProvider } from "material-ui-pickers";
import PropTypes from "prop-types";

import { helpers } from "../../../common_helpers/helpers";
import { CreateListMalwareResult } from "../anyElements.jsx";
import { CreateShortInformationSTIXObject } from "../createShortInformationSTIXObject.jsx";

const defaultData = "0001-01-01T00:00";
const minDefaultData = "1970-01-01T00:00:00.000Z";

export default function CreateMalwareAnalysisPatternElements(props){
    let { 
        isDisabled,
        showRefElement,
        campaignPatterElement,
        handlerClick,
        handlerResult,
        handlerProduct,
        handlerVersion,
        handlerSubmitted,
        handlerResultName,
        handlerListModules,
        handlerAnalysisEnded,
        handlerButtonShowLink,
        handlerAnalysisStarted,		
        handlerAlysisEngineVersion,
        handlerConfigurationVersion,
        handlerAnalysisDefinitionVersion,
    } = props;
    
    let [ invalidProduct, setInvalidProduct ] = React.useState(((typeof campaignPatterElement.product === "undefined") || (campaignPatterElement.product === "")));
    let [ expanded, setExpanded ] = React.useState(false);
    let [ refId, setRefId ] = React.useState("");

    React.useEffect(() => {
        if((typeof campaignPatterElement.product !== "undefined") && campaignPatterElement.product !== ""){
            setInvalidProduct(false);
        }
    }, [campaignPatterElement.product]);

    let handleExpandClick = (id) => {
        if(id !== refId){
            setExpanded(true); 
            setRefId(id);
        } else {
            if(expanded){
                setExpanded(false);
            } else {
                setExpanded(true); 
            }    
        }

        handlerButtonShowLink(id);
    };

    let submitted = minDefaultData;
    let analysisStarted = minDefaultData;
    let analysisEnded = minDefaultData;
    let currentTimeZoneOffsetInHours = new Date().getTimezoneOffset() / 60;
    let ms = currentTimeZoneOffsetInHours * 3600000;
    
    if(currentTimeZoneOffsetInHours > 0){
        if(typeof campaignPatterElement.submitted !== "undefined" && campaignPatterElement.submitted.slice(0, 16) !== defaultData){
            submitted = new Date(Date.parse(campaignPatterElement.submitted) + ms);
        }

        if(typeof campaignPatterElement.analysis_started !== "undefined" && campaignPatterElement.analysis_started.slice(0, 16) !== defaultData){
            analysisStarted = new Date(Date.parse(campaignPatterElement.analysis_started) + ms);
        }

        if(typeof campaignPatterElement.analysis_ended !== "undefined" && campaignPatterElement.analysis_ended.slice(0, 16) !== defaultData){
            analysisEnded = new Date(Date.parse(campaignPatterElement.analysis_ended) + ms);
        }
    } else {
        if(typeof campaignPatterElement.submitted !== "undefined" && campaignPatterElement.submitted.slice(0, 16) !== defaultData){
            submitted = new Date(Date.parse(campaignPatterElement.submitted) - (ms * -1));
        }

        if(typeof campaignPatterElement.analysis_started !== "undefined" && campaignPatterElement.analysis_started.slice(0, 16) !== defaultData){
            analysisStarted = new Date(Date.parse(campaignPatterElement.analysis_started) - (ms * -1));
        }

        if(typeof campaignPatterElement.analysis_ended !== "undefined" && campaignPatterElement.analysis_ended.slice(0, 16) !== defaultData){
            analysisEnded = new Date(Date.parse(campaignPatterElement.analysis_ended) - (ms * -1));
        }
    }

    return (<React.Fragment>
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">название аналитического ПО использованного для обработки и анализа вредоносного ПО:</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-product"
                    error={invalidProduct}
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerProduct}
                    value={(campaignPatterElement.product)? campaignPatterElement.product: ""}
                    helperText="обязательное поле"
                />
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3} style={{ marginTop: 2 }}>
            <Grid item container md={4} justifyContent="flex-end">
                <span className="text-muted">Первое сканирование или анализ:</span>
            </Grid>
            <Grid item container md={8}>
                {isDisabled?
                    helpers.convertDateFromString(submitted, { monthDescription: "long", dayDescription: "numeric" })
                    :<MuiPickersUtilsProvider utils={DateFnsUtils}>
                        <DateTimePicker
                            variant="inline"
                            ampm={false}
                            value={submitted}
                            minDate={new Date("1970-01-01")}
                            maxDate={new Date()}
                            onChange={handlerSubmitted}
                            format="dd.MM.yyyy HH:mm"
                        />
                    </MuiPickersUtilsProvider>}
            </Grid>
        </Grid> 
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end">
                <span className="text-muted">Начало анализа:</span>
            </Grid>
            <Grid item container md={8}>
                {isDisabled?
                    helpers.convertDateFromString(analysisStarted, { monthDescription: "long", dayDescription: "numeric" }):
                    <MuiPickersUtilsProvider utils={DateFnsUtils}>
                        <DateTimePicker
                            variant="inline"
                            ampm={false}
                            value={analysisStarted}
                            minDate={new Date("1970-01-01")}
                            maxDate={new Date()}
                            onChange={handlerAnalysisStarted}
                            format="dd.MM.yyyy HH:mm"
                        />
                    </MuiPickersUtilsProvider>}
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end">
                <span className="text-muted">Окончание анализа:</span>
            </Grid>
            <Grid item container md={8}>
                {isDisabled?
                    helpers.convertDateFromString(analysisEnded, { monthDescription: "long", dayDescription: "numeric" }):
                    <MuiPickersUtilsProvider utils={DateFnsUtils}>
                        <DateTimePicker
                            variant="inline"
                            ampm={false}
                            value={analysisEnded}
                            minDate={new Date("1970-01-01")}
                            maxDate={new Date()}
                            onChange={handlerAnalysisEnded}
                            format="dd.MM.yyyy HH:mm"
                        />
                    </MuiPickersUtilsProvider>}
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Версия аналитического програмного обеспечения:</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-version"
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerVersion}
                    value={(campaignPatterElement.version)? campaignPatterElement.version: ""}
                />
            </Grid>
        </Grid>
        {campaignPatterElement.host_vm_ref && (typeof campaignPatterElement.host_vm_ref !== "undefined") && campaignPatterElement.host_vm_ref.length !== 0?
            <Grid container direction="row" spacing={3} className="pt-1">
                <Grid item container md={5} justifyContent="flex-end">
                    <span className="text-muted mt-3">Виртуальное окружение использованное для анализа вредоносного программного обеспечения:</span>
                </Grid>
                <Grid item container md={7}>
                    <Card variant="outlined" style={{ width: "100%" }}>
                        <CardActions>
                            <Button onClick={() => { 
                                handleExpandClick(campaignPatterElement.host_vm_ref);
                            }}>
                                <img 
                                    src={`/images/stix_object/${helpers.getLinkImageSTIXObject(campaignPatterElement.host_vm_ref.split("--")[0]).link}`} 
                                    width="25" 
                                    height="25" />
                                    &nbsp;{campaignPatterElement.host_vm_ref}
                            </Button>
                        </CardActions>
                        <Collapse in={showRefElement.id === campaignPatterElement.host_vm_ref && refId === campaignPatterElement.host_vm_ref && expanded} timeout="auto" unmountOnExit>
                            <CardContent>
                                <CreateShortInformationSTIXObject 
                                    obj={showRefElement.obj}
                                    handlerClick={() => {}} 
                                />
                            </CardContent>
                        </Collapse>
                    </Card>
                </Grid>
            </Grid>:
            ""}
        {campaignPatterElement.operating_system_ref && (typeof campaignPatterElement.operating_system_ref !== "undefined") && campaignPatterElement.operating_system_ref.length !== 0?
            <Grid container direction="row" spacing={3} className="pt-1">
                <Grid item container md={5} justifyContent="flex-end">
                    <span className="text-muted mt-3">Описание операционной системы используемой для динамического анализа вредоносного программного обеспечения:</span>
                </Grid>
                <Grid item container md={7}>
                    <Card variant="outlined" style={{ width: "100%" }}>
                        <CardActions>
                            <Button onClick={() => { 
                                handleExpandClick(campaignPatterElement.operating_system_ref);
                            }}>
                                <img 
                                    src={`/images/stix_object/${helpers.getLinkImageSTIXObject(campaignPatterElement.operating_system_ref.split("--")[0]).link}`} 
                                    width="25" 
                                    height="25" />
                                    &nbsp;{campaignPatterElement.operating_system_ref}
                            </Button>
                        </CardActions>
                        <Collapse in={showRefElement.id === campaignPatterElement.operating_system_ref && refId === campaignPatterElement.operating_system_ref && expanded} timeout="auto" unmountOnExit>
                            <CardContent>
                                <CreateShortInformationSTIXObject 
                                    obj={showRefElement.obj}
                                    handlerClick={() => {}} 
                                />
                            </CardContent>
                        </Collapse>
                    </Card>
                </Grid>
            </Grid>:
            ""}
        {campaignPatterElement.installed_software_refs && (typeof campaignPatterElement.installed_software_refs !== "undefined") && campaignPatterElement.installed_software_refs.length > 0?
            <React.Fragment>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        <span className="text-muted">Список объектов с описанием любого нестандартного программного обеспечения установленного в операционной системе применяемой для динамического анализа вредоносного программного обеспечения:</span>
                    </Grid>
                </Grid>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        {campaignPatterElement.installed_software_refs.map((item, key) => {
                            let type = item.split("--");
                            let objectElem = helpers.getLinkImageSTIXObject(type[0]);
        
                            if(typeof objectElem === "undefined" ){
                                return "";
                            }

                            return (<Card variant="outlined" style={{ width: "100%", paddingTop: 1 }} key={`key_installed_software_ref_${key}`}>
                                <CardActions>
                                    <Button onClick={() => { 
                                        handleExpandClick(item);
                                    }}>
                                        <img 
                                            src={`/images/stix_object/${objectElem.link}`} 
                                            width="25" 
                                            height="25" />
                                        &nbsp;{item}
                                    </Button>
                                </CardActions>
                                <Collapse in={showRefElement.id === item && refId === item && expanded} timeout="auto" unmountOnExit>
                                    <CardContent>
                                        <CreateShortInformationSTIXObject 
                                            obj={showRefElement.obj}
                                            handlerClick={handlerClick}
                                        />
                                    </CardContent>
                                </Collapse>
                            </Card>);
                        })}
                    </Grid>
                </Grid>
            </React.Fragment>:
            ""}
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Конфигурация дополнительных параметров конфигурации продукта, используемого для анализа:</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-configuration_version"
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerConfigurationVersion}
                    value={(campaignPatterElement.configuration_version)? campaignPatterElement.configuration_version: ""}
                />
            </Grid>
        </Grid>
        
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Версия аналитического движка или продукта (включая AV-движки), использованного для выполнения анализа:</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-analysis_engine_version"
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerAlysisEngineVersion}
                    value={(campaignPatterElement.analysis_engine_version)? campaignPatterElement.analysis_engine_version: ""}
                />
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Версия определений анализа, используемых инструментом анализа (включая AV-инструменты):</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-analysis_definition_version"
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerAnalysisDefinitionVersion}
                    value={(campaignPatterElement.analysis_definition_version)? campaignPatterElement.analysis_definition_version: ""}
                />
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3} className="pt-1">
            <Grid item container md={5} justifyContent="flex-end">
                <span className="text-muted mt-2">Модули анализа использованные и сконфигурированные в продукте во время выполнения анализа:</span>
            </Grid>
            <Grid item md={7}>
                <TokenInput
                    readOnly={isDisabled}
                    style={{ height: "40px", width: "auto" }}
                    tokenValues={(!campaignPatterElement.modules) ? []: campaignPatterElement.modules}
                    onTokenValuesChange={handlerListModules} />
            </Grid>
        </Grid>
        <Grid container direction="row" spacing={3} style={{ marginBottom: 2 }}>
            <Grid item container md={4} justifyContent="flex-end"><span className="text-muted mt-2">Результат классификации или имя, присвоенное экземпляру вредоносного программного обеспечения инструментом анализа (сканером):</span></Grid>
            <Grid item container md={8}>
                <TextField
                    fullWidth
                    disabled={isDisabled}
                    id="outlined-result_name"
                    InputLabelProps={{ shrink: true }}
                    onChange={handlerResultName}
                    value={(campaignPatterElement.result_name)? campaignPatterElement.result_name: ""}
                />
            </Grid>
        </Grid>
        <CreateListMalwareResult
            isDisabled={isDisabled}
            campaignPatterElement={campaignPatterElement}
            handlerResult={handlerResult}
        />
        {campaignPatterElement.sample_ref && (typeof campaignPatterElement.sample_ref !== "undefined") && campaignPatterElement.sample_ref.length !== 0?
            <Grid container direction="row" spacing={3} style={{ marginTop: 1 }}>
                <Grid item container md={5} justifyContent="flex-end">
                    <span className="text-muted mt-3">Ссылка на файл, сетевой трафик или объект на основе которого был выполнен анализ вредоносного программного обеспечения:</span>
                </Grid>
                <Grid item container md={7}>
                    <Card variant="outlined" style={{ width: "100%" }}>
                        <CardActions>
                            <Button onClick={() => { 
                                handleExpandClick(campaignPatterElement.sample_ref);
                            }}>
                                <img 
                                    src={`/images/stix_object/${helpers.getLinkImageSTIXObject(campaignPatterElement.sample_ref.split("--")[0]).link}`} 
                                    width="25" 
                                    height="25" />
                                    &nbsp;{campaignPatterElement.sample_ref}
                            </Button>
                        </CardActions>
                        <Collapse in={showRefElement.id === campaignPatterElement.sample_ref && refId === campaignPatterElement.sample_ref && expanded} timeout="auto" unmountOnExit>
                            <CardContent>
                                <CreateShortInformationSTIXObject 
                                    obj={showRefElement.obj}
                                    handlerClick={() => {}} 
                                />
                            </CardContent>
                        </Collapse>
                    </Card>
                </Grid>
            </Grid>:
            ""}
        {campaignPatterElement.analysis_sco_refs && (typeof campaignPatterElement.analysis_sco_refs !== "undefined") && campaignPatterElement.analysis_sco_refs.length > 0?
            <React.Fragment>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        <span className="text-muted">Список других наблюдаемых Domain Objects STIX захваченных в процессе наблюдения:</span>
                    </Grid>
                </Grid>
                <Grid container direction="row" spacing={3} style={{ marginTop: 4 }}>
                    <Grid item container md={12} justifyContent="flex-start">
                        {campaignPatterElement.analysis_sco_refs.map((item, key) => {
                            let type = item.split("--");
                            let objectElem = helpers.getLinkImageSTIXObject(type[0]);
        
                            if(typeof objectElem === "undefined" ){
                                return "";
                            }

                            return (<Card variant="outlined" style={{ width: "100%", paddingTop: 1 }} key={`key_analysis_sco_ref_${key}`}>
                                <CardActions>
                                    <Button onClick={() => { 
                                        handleExpandClick(item);
                                    }}>
                                        <img 
                                            src={`/images/stix_object/${objectElem.link}`} 
                                            width="25" 
                                            height="25" />
                                        &nbsp;{item}
                                    </Button>
                                </CardActions>
                                <Collapse in={showRefElement.id === item && refId === item && expanded} timeout="auto" unmountOnExit>
                                    <CardContent>
                                        <CreateShortInformationSTIXObject 
                                            obj={showRefElement.obj}
                                            handlerClick={handlerClick}
                                        />
                                    </CardContent>
                                </Collapse>
                            </Card>);
                        })}
                    </Grid>
                </Grid>
            </React.Fragment>:
            ""}
    </React.Fragment>);
}

CreateMalwareAnalysisPatternElements.propTypes = {
    isDisabled: PropTypes.bool.isRequired,
    showRefElement: PropTypes.object.isRequired,
    campaignPatterElement: PropTypes.object.isRequired,
    handlerClick: PropTypes.func.isRequired,
    handlerResult: PropTypes.func.isRequired,
    handlerProduct: PropTypes.func.isRequired,
    handlerVersion: PropTypes.func.isRequired,
    handlerSubmitted: PropTypes.func.isRequired,
    handlerResultName: PropTypes.func.isRequired,
    handlerListModules: PropTypes.func.isRequired,
    handlerAnalysisEnded: PropTypes.func.isRequired,
    handlerButtonShowLink: PropTypes.func.isRequired,
    handlerAnalysisStarted: PropTypes.func.isRequired,
    handlerAlysisEngineVersion: PropTypes.func.isRequired,
    handlerConfigurationVersion: PropTypes.func.isRequired,
    handlerAnalysisDefinitionVersion: PropTypes.func.isRequired,
};

/**
//MalwareAnalysisDomainObjectsSTIX объект "Malware Analysis", по терминалогии STIX, содержит анализ вредоносных программ захватывающих метаданные
//  и результаты конкретного статического или динамического анализа, выполненного на экземпляре вредоносного ПО или семействе вредоносных программ
// Product - название аналитического ПО использованного для обработки и анализа вредоносного ПО (ОБЯЗАТЕЛЬНОЕ ЗНАЧЕНИЕ)
// Version - версия аналитического ПО
// HostVMRef - идентификатор на описание виртуального окружения использованного для анализа вредоносного ПО
// OperatingSystemRef - идентификатор на описание ОС используемой для динамического анализа вредоносного ПО
// InstalledSoftwareRefs - список идентификаторов ссылающихся на описание любого нестандартного ПО установленного в ОС используемой для динамического
//  анализа вредоносного ПО
// ConfigurationVersion - именованная конфигурация дополнительных параметров конфигурации продукта, используемого для анализа
// Modules - конкретные модули анализа, которые были использованы и сконфигурированы в продукте во время выполнения анализа
// AnalysisEngineVersion - версия аналитического движка или продукта (включая AV-движки), который был использован для выполнения анализа
// AnalysisDefinitionVersion - версия определений анализа, используемых инструментом анализа (включая AV-инструменты)
// Submitted - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО было впервые отправлено на сканирование или анализ
// AnalysisStarted - время, в формате "2016-05-12T08:17:27.000Z", начала анализа вредоносного ПО
// AnalysisEnded - время, в формате "2016-05-12T08:17:27.000Z", когда был завершен анализ вредоносного ПО
// ResultName - результат классификации или имя, присвоенное экземпляру вредоносного ПО инструментом анализа (сканером)
// Result - один, из заранее определенного (предложенного) перечня результатов классификации, определяется аналитическим инструментом или сканером
// AnalysisScoRefs - список идентификаторов на другие наблюдаемые Domain Objects STIX которые были захвачены в процессе наблюдения
// SampleRef - содержит ссылку на файл, сетевой трафик или объект на основе которого был выполнен анализ вредоносного ПО
// AvResult - результат аналитической обработки (ЭТО ПОЛЕ ЕСТЬ ТОЛЬКО В ПРИМЕРЕ, в описании типа данного поля нет)
type MalwareAnalysisDomainObjectsSTIX struct {
	CommonPropertiesObjectSTIX
	CommonPropertiesDomainObjectSTIX
	Product                   string               `json:"product" bson:"product" required:"true"`
	Version                   string               `json:"version" bson:"version"`
	HostVMRef                 IdentifierTypeSTIX   `json:"host_vm_ref" bson:"host_vm_ref"`
	OperatingSystemRef        IdentifierTypeSTIX   `json:"operating_system_ref" bson:"operating_system_ref"`
	InstalledSoftwareRefs     []IdentifierTypeSTIX `json:"installed_software_refs" bson:"installed_software_refs"`
	ConfigurationVersion      string               `json:"configuration_version" bson:"configuration_version"`
	Modules                   []string             `json:"modules" bson:"modules"`
	AnalysisEngineVersion     string               `json:"analysis_engine_version" bson:"analysis_engine_version"`
	AnalysisDefinitionVersion string               `json:"analysis_definition_version" bson:"analysis_definition_version"`
	Submitted                 time.Time            `json:"submitted" bson:"submitted"`
	AnalysisStarted           time.Time            `json:"analysis_started" bson:"analysis_started"`
	AnalysisEnded             time.Time            `json:"analysis_ended" bson:"analysis_ended"`
	ResultName                string               `json:"result_name" bson:"result_name"`
	Result                    OpenVocabTypeSTIX    `json:"result" bson:"result"`
	AnalysisScoRefs           []IdentifierTypeSTIX `json:"analysis_sco_refs" bson:"analysis_sco_refs"`
	SampleRef                 IdentifierTypeSTIX   `json:"sample_ref" bson:"sample_ref"`
}
 */