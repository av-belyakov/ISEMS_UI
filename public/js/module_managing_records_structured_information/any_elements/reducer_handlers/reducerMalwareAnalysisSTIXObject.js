export default function reducerMalwareAnalysisSTIXObjects(state, action){
    let dateTime = "";
    let currentTimeZoneOffsetInHours = new Date().getTimezoneOffset() / 60;
    let ms = currentTimeZoneOffsetInHours * 3600000;
 
    let tmp = "";

    switch(action.type){
    case "newAll":   
        if(action.data.submitted){
            action.data.submitted = new Date(Date.parse(action.data.submitted)).toISOString();
        }

        if(action.data.analysis_started){
            action.data.analysis_started = new Date(Date.parse(action.data.analysis_started)).toISOString();
        }

        if(action.data.analysis_ended){
            action.data.analysis_ended = new Date(Date.parse(action.data.analysis_ended)).toISOString();
        }

        return {...state, mainObj: action.data};
    case "cleanAll":
        return {...state, mainObj: {}}; 
    case "updateResult":
        state.mainObj.result = action.data;

        return {...state};
    case "updateProduct":
        state.mainObj.product = action.data;

        return {...state};
    case "updateVersion":
        state.mainObj.version = action.data;

        return {...state};
    case "updateSubmitted":                    
        tmp = Date.parse(action.data);

        if(currentTimeZoneOffsetInHours < 0){
            dateTime = new Date(tmp + (ms * -1));
        } else {
            dateTime = new Date(tmp - (ms * -1));
        }

        state.mainObj.submitted = new Date(Date.parse(dateTime)).toISOString();

        return {...state};
    case "updateResultName":
        state.mainObj.result_name = action.data;

        return {...state};
    case "updateListModules":
        state.mainObj.modules = action.data;

        return {...state};
    case "updateAnalysisEnded":
        tmp = Date.parse(action.data);

        if(currentTimeZoneOffsetInHours < 0){
            dateTime = new Date(tmp + (ms * -1));
        } else {
            dateTime = new Date(tmp - (ms * -1));
        }

        state.mainObj.analysis_ended = new Date(Date.parse(dateTime)).toISOString();

        return {...state};
    case "updateAnalysisStarted":
        tmp = Date.parse(action.data);

        if(currentTimeZoneOffsetInHours < 0){
            dateTime = new Date(tmp + (ms * -1));
        } else {
            dateTime = new Date(tmp - (ms * -1));
        }

        state.mainObj.analysis_started = new Date(Date.parse(dateTime)).toISOString();
        
        return {...state};
    case "updateConfigurationVersion":
        state.mainObj.configuration_version = action.data;

        return {...state};
    case "updateAlysisEngineVersion":
        state.mainObj.analysis_engine_version = action.data;

        return {...state};
    case "updateAnalysisDefinitionVersion":
        state.mainObj.analysis_definition_version = action.data;

        return {...state}; 
    case "updateArchitectureExecutionEnvs":
        return {...state, architecture_execution_envs: action.data};
    case "updateImplementationLanguages":
        return {...state, implementation_languages: action.data};
    case "updateCapabilities":
        return {...state, capabilities: action.data};
    case "updateConfidence":
        if(state.confidence === action.data.data){
            return {...state};
        }
    
        return {...state, confidence: action.data.data};
    case "updateDefanged":
        return {...state, defanged: (action.data.data === "true")};
    case "updateLabels":
        return {...state, labels: action.data.listTokenValue};
    case "updateExternalReferences":
        if(!state.external_references){
            state.external_references = [];
        }
    
        for(let key of state.external_references){
            if(key.source_name === action.data.source_name){
                return {...state};
            }
        }
    
        state.external_references.push(action.data);
    
        return {...state};
    case "updateExternalReferencesHashesUpdate":
        if((state.external_references[action.data.orderNumber].hashes === null) || (typeof state.external_references[action.data.orderNumber].hashes === "undefined")){
            state.external_references[action.data.orderNumber].hashes = {};
        }
    
        state.external_references[action.data.orderNumber].hashes[action.data.newHash.hash] = action.data.newHash.type;
    
        return {...state};
    case "updateExternalReferencesHashesDelete":
        delete state.external_references[action.data.orderNumber].hashes[action.data.hashName];
    
        return {...state};
    case "updateGranularMarkings":
        if(!state.granular_markings){
            state.granular_markings = [];
        }
    
        for(let keyGM of state.granular_markings){
            if(!keyGM.selectors){
                return {...state};
            }
    
            for(let keyS of keyGM.selectors){
                for(let key of action.data.selectors){
                    if(key === keyS){
                        return {...state};
                    }
                }
            }
        }
    
        state.granular_markings.push(action.data);
    
        return {...state};
    case "updateExtensions":
        if(!state.extensions){
            state.extensions = {};
        }
    
        state.extensions[action.data.name] = action.data.description;
    
        return {...state};
    case "deleteKillChainPhases":
        state.kill_chain_phases.splice(action.data, 1);
        
        return {...state};
    case "deleteElementAdditionalTechnicalInformation":
        switch(action.data.itemType){
        case "extensions":
            delete state.extensions[action.data.item];
    
            return {...state};
        case "granular_markings":
            state.granular_markings.splice(action.data.orderNumber, 1);
    
            return {...state};
        case "external_references":
            state.external_references.splice(action.data.orderNumber, 1);
    
            return {...state};
        }
    }
}