"use strict";

import React from "react";
import { Col, Row } from "react-bootstrap";
import { 
    //AppBar,
    //Button,
    //Container,
    //Dialog,
    DialogContent,
    LinearProgress,
    Grid,
    //Toolbar,
    //Typography,
} from "@material-ui/core";
import { teal, grey } from "@material-ui/core/colors";
import { makeStyles } from "@material-ui/core/styles";
//import { v4 as uuidv4 } from "uuid";
import PropTypes from "prop-types";

const useStyles = makeStyles((theme) => ({
    appBar: {
        position: "fixed",
        color: theme.palette.getContrastText(teal[500]),
        backgroundColor: teal[500],
    },
    appBreadcrumbs: {
        position: "fixed",
        top: "60px",
        color: theme.palette.getContrastText(grey[50]),
        backgroundColor: grey[50],
        paddingLeft: theme.spacing(4),
    },
    buttonSave: {
        color: theme.palette.getContrastText(teal[500]),
        backgroundColor: teal[500],
    },
    title: {
        marginLeft: theme.spacing(2),
        flex: 1,
    },
    root: {
        width: "100%",
    },
    heading: {
        fontSize: theme.typography.pxToRem(15),
        fontWeight: theme.typography.fontWeightRegular,
    },
}));

export default function CreateDialogContentMalwareSTIXObject(props){
    let { 
        listObjectInfo, 
        currentIdSTIXObject,
        handlerDialog,
        handelrDialogClose,
        isNotDisabled,
    } = props;

    if((listObjectInfo[currentIdSTIXObject] === null) || (typeof listObjectInfo[currentIdSTIXObject] === "undefined")){
        return (<DialogContent>
            <Grid container direction="row" spacing={3}>
                <Grid item container md={12} justifyContent="center" className="pb-3">
                    поиск информации об STIX объекте типа Вредоносное программное обеспечение (Malware DO STIX)
                </Grid>
            </Grid>
            <LinearProgress />
        </DialogContent>);
    }

    return (<React.Fragment>
        <DialogContent>
            <Row className="mt-2">
                <Col md={12} className="pl-3 pr-3">
                Просмотр и редактирование STIX объекта типа Вредоносное программное обеспечение (Malware DO STIX)
                </Col>
                <Col md={12} className="pt-2 pl-3 pr-3">{JSON.stringify(listObjectInfo[currentIdSTIXObject])}</Col>
            </Row>
        </DialogContent>
    </React.Fragment>);
}

CreateDialogContentMalwareSTIXObject.propTypes = {
    listObjectInfo: PropTypes.object.isRequired,
    currentIdSTIXObject: PropTypes.string.isRequired,
    handlerDialog: PropTypes.func.isRequired,
    handelrDialogClose: PropTypes.func.isRequired,
    isNotDisabled: PropTypes.bool.isRequired,
};

/**
 * Теперь надо сделать объекты MalwareSTIXObject и MalwareAnalysisDomainObjectsSTIX
 * при этом нужно продумать как реализовать их связь между собой так как MalwareAnalysisDomainObjectsSTIX
 * зависит от MalwareSTIXObject
 * 
 * Тоже самое надо сделать с ObservedSTIXObject и IndicatorSTIXObject так как IndicatorSTIXObject зависит
 * от ObservedSTIXObject
 */

/**
//MalwareDomainObjectsSTIX объект "Malware", по терминалогии STIX, содержит подробную информацию о функционировании вредоносной программы
// Name - имя используемое для идентификации "Malware"
// Description - более подробное описание
// MalwareTypes - заранее определенный (предложенный) перечень вредоносного ПО
// IsFamily - представляет ли объект семейство вредоносных программ (если true) или экземпляр вредоносного ПО (если false) (ОБЯЗАТЕЛЬНОЕ ЗНАЧЕНИЕ)
// Aliases - альтернативные имена используемые для идентификации этого ПО или семейства ПО
// KillChainPhases - список цепочки фактов, к которым может быть отнесено это вредоносное ПО
// FirstSeen - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО или семейство вредоносных программ были впервые замечины
// LastSeen - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО или семейство вредоносных программ были замечины в последний раз
// OperatingSystemRefs - перечень идентификаторов ОС в которых может быть выполнено вредоносное ПО или семейство вредоносных программ
// ArchitectureExecutionEnvs - заранее определенный (предложенный) перечень архитектур в которых может быть выполнено вредоносное ПО или семейство
//  вредоносных программ
// ImplementationLanguages - заранее определенный (предложенный) перечень языков программирования, используемых для реализации вредоносного ПО или семейства
//  вредоносных программ
// Capabilities - заранее определенный (предложенный) перечень возможных идентификаторов используемых для обнаружения вредоносного ПО или семейства вредоносных
//  программ
// SampleRefs - определяет список идентификаторов файлов или объектов ассоциируемых с вредоносным ПО или семейством вредоносных программ
type MalwareDomainObjectsSTIX struct {
	CommonPropertiesObjectSTIX
	CommonPropertiesDomainObjectSTIX
	Name                      string                  `json:"name" bson:"name"`
	Description               string                  `json:"description" bson:"description"`
	MalwareTypes              []OpenVocabTypeSTIX     `json:"malware_types" bson:"malware_types"`
	IsFamily                  bool                    `json:"is_family" bson:"is_family" required:"true"`
	Aliases                   []string                `json:"aliases" bson:"aliases"`
	KillChainPhases           KillChainPhasesTypeSTIX `json:"kill_chain_phases" bson:"kill_chain_phases"`
	FirstSeen                 time.Time               `json:"first_seen" bson:"first_seen"`
	LastSeen                  time.Time               `json:"last_seen" bson:"last_seen"`
	OperatingSystemRefs       []IdentifierTypeSTIX    `json:"operating_system_refs" bson:"operating_system_refs"`
	ArchitectureExecutionEnvs []OpenVocabTypeSTIX     `json:"architecture_execution_envs" bson:"architecture_execution_envs"`
	ImplementationLanguages   []OpenVocabTypeSTIX     `json:"implementation_languages" bson:"implementation_languages"`
	Capabilities              []OpenVocabTypeSTIX     `json:"capabilities" bson:"capabilities"`
	SampleRefs                []IdentifierTypeSTIX    `json:"sample_refs" bson:"sample_refs"`
}

//MalwareAnalysisDomainObjectsSTIX объект "Malware Analysis", по терминалогии STIX, содержит анализ вредоносных программ захватывающих метаданные
//  и результаты конкретного статического или динамического анализа, выполненного на экземпляре вредоносного ПО или семействе вредоносных программ
// Product - название аналитического ПО использованного для обработки и анализа вредоносного ПО (ОБЯЗАТЕЛЬНОЕ ЗНАЧЕНИЕ)
// Version - версия аналитического ПО
// HostVMRef - идентификатор на описание виртуального окружения использованного для анализа вредоносного ПО
// OperatingSystemRef - идентификатор на описание ОС используемой для динамического анализа вредоносного ПО
// InstalledSoftwareRefs - список идентификаторов ссылающихся на описание любого нестандартного ПО установленного в ОС используемой для динамического
//  анализа вредоносного ПО
// ConfigurationVersion - именованная конфигурация дополнительных параметров конфигурации продукта, используемого для анализа
// Modules - конкретные модули анализа, которые были использованы и сконфигурированы в продукте во время выполнения анализа
// AnalysisEngineVersion - версия аналитического движка или продукта (включая AV-движки), который был использован для выполнения анализа
// AnalysisDefinitionVersion - версия определений анализа, используемых инструментом анализа (включая AV-инструменты)
// Submitted - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО было впервые отправлено на сканирование или анализ
// AnalysisStarted - время, в формате "2016-05-12T08:17:27.000Z", начала анализа вредоносного ПО
// AnalysisEnded - время, в формате "2016-05-12T08:17:27.000Z", когда был завершен анализ вредоносного ПО
// ResultName - результат классификации или имя, присвоенное экземпляру вредоносного ПО инструментом анализа (сканером)
// Result - один, из заранее определенного (предложенного) перечня результатов классификации, определяется аналитическим инструментом или сканером
// AnalysisScoRefs - список идентификаторов на другие наблюдаемые Domain Objects STIX которые были захвачены в процессе наблюдения
// SampleRef - содержит ссылку на файл, сетевой трафик или объект на основе которого был выполнен анализ вредоносного ПО
// AvResult - результат аналитической обработки (ЭТО ПОЛЕ ЕСТЬ ТОЛЬКО В ПРИМЕРЕ, в описании типа данного поля нет)
type MalwareAnalysisDomainObjectsSTIX struct {
	CommonPropertiesObjectSTIX
	CommonPropertiesDomainObjectSTIX
	Product                   string               `json:"product" bson:"product" required:"true"`
	Version                   string               `json:"version" bson:"version"`
	HostVMRef                 IdentifierTypeSTIX   `json:"host_vm_ref" bson:"host_vm_ref"`
	OperatingSystemRef        IdentifierTypeSTIX   `json:"operating_system_ref" bson:"operating_system_ref"`
	InstalledSoftwareRefs     []IdentifierTypeSTIX `json:"installed_software_refs" bson:"installed_software_refs"`
	ConfigurationVersion      string               `json:"configuration_version" bson:"configuration_version"`
	Modules                   []string             `json:"modules" bson:"modules"`
	AnalysisEngineVersion     string               `json:"analysis_engine_version" bson:"analysis_engine_version"`
	AnalysisDefinitionVersion string               `json:"analysis_definition_version" bson:"analysis_definition_version"`
	Submitted                 time.Time            `json:"submitted" bson:"submitted"`
	AnalysisStarted           time.Time            `json:"analysis_started" bson:"analysis_started"`
	AnalysisEnded             time.Time            `json:"analysis_ended" bson:"analysis_ended"`
	ResultName                string               `json:"result_name" bson:"result_name"`
	Result                    OpenVocabTypeSTIX    `json:"result" bson:"result"`
	AnalysisScoRefs           []IdentifierTypeSTIX `json:"analysis_sco_refs" bson:"analysis_sco_refs"`
	SampleRef                 IdentifierTypeSTIX   `json:"sample_ref" bson:"sample_ref"`
	AvResult                  OpenVocabTypeSTIX    `json:"av_result" bson:"av_result"`
}

 */